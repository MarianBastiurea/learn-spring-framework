/*
game class- PacmanGame, MarioGame and SuperContraGame class
use GamingConsole as  interface to loose coupling between AppGaming and each game class
injection or wiring means add  a game class as var for GameRunner class
@Configuration will create a configuration class that we want Spring to manage
@Bean will produce a bean for spring container
Spring Container: Manages Spring beans &their lifecycle
Bean Factory: Basic Spring Container

Application Context: Advanced Spring
Container with enterprise-specific features
Easy to use in web applications
Easy internationalization
Easy integration with Spring AOP

Java Bean: Classes adhering to 3 constraints:
1: Have public default (no argument) constructors
2: Allow access to their properties using getter and
setter methods
3: Implement java.io.Serializable
POJO: Plain Old Java Object
No constraints
Any Java Object is a POJO!
Spring Bean: Any Java object that is managed
by Spring
Spring uses IOC Container (Bean Factory or
Application Context) to manage these objects

@Primary- A bean should be given preference when multiplies candudates are qualified
@Qualifier- when a specific bean should be auto-wired( name of the bean could be considered as qualifier

Constructor-based : Dependencies are set by creating the Bean using its Constructor
Setter-based : Dependencies are set by calling setter methods on your beans
Field: No setter or constructor. Dependency is injected using reflection.
Question: Which one should you use?
Spring team recommends Constructor-based injection as dependencies are automatically set when an object
is created!