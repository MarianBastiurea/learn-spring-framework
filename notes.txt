/*
game class- PacmanGame, MarioGame and SuperContraGame class
use GamingConsole as  interface to loose coupling between AppGaming and each game class
injection or wiring means add  a game class as var for GameRunner class
@Configuration will create a configuration class that we want Spring to manage
@Bean will produce a bean for spring container
Spring Container: Manages Spring beans &their lifecycle
Bean Factory: Basic Spring Container

Application Context: Advanced Spring
Container with enterprise-specific features
Easy to use in web applications
Easy internationalization
Easy integration with Spring AOP

Java Bean: Classes adhering to 3 constraints:
1: Have public default (no argument) constructors
2: Allow access to their properties using getter and
setter methods
3: Implement java.io.Serializable
POJO: Plain Old Java Object
No constraints
Any Java Object is a POJO!
Spring Bean: Any Java object that is managed
by Spring
Spring uses IOC Container (Bean Factory or
Application Context) to manage these objects

@Primary- A bean should be given preference when multiplies candudates are qualified
@Qualifier- when a specific bean should be auto-wired( name of the bean could be considered as qualifier

Constructor-based : Dependencies are set by creating the Bean using its Constructor
Setter-based : Dependencies are set by calling setter methods on your beans
Field: No setter or constructor. Dependency is injected using reflection.
Question: Which one should you use?
Spring team recommends Constructor-based injection as dependencies are automatically set when an object
is created!

Heading  @Bean
Where?
@Component-Can be used on any Java class
@Bean-Typically used on methods in Spring.Configuration classes
Ease of use
@Component- Very easy. Just add an annotation.
@Bean-You write all the code.
Autowiring
@Component- Yes - Field, Setter or Constructor Injection
@Bean-Yes - method call or method parameters
Who creates beans?
@Component-Spring Framework
@Bean-You write bean creation code
Recommended For
@Component-Instantiating Beans for Your Own Application
@Bean-Code: @Component
1:Custom Business Logic
2: Instantiating Beans for 3rd-party
libraries: @Bean
Beans per class?
@ComponentOne (Singleton) or Many (Prototype)
 @Bean-One or Many - You can create as many as you want

 Exploring Lazy Initialization of Spring Beans
 Default initialization for Spring Beans: Eager
 Eager initialization is recommended:
 Errors in the configuration are discovered immediately at application startup
 However, you can configure beans to be lazily initialized using Lazy annotation:
 NOT recommended (AND) Not frequently used
 Lazy annotation:
 Can be used almost everywhere @Component and @Bean are used
 Lazy-resolution proxy will be injected instead of actual dependency
 Can be used on Configuration (@Configuration) class:
 All @Bean methods within the @Configuration will be lazily initialized

 Comparing Lazy Initialization vs Eager Initialization
Initialization time:
 Lazy Initialization  Bean initialized when it is first made use of in the application
 Eager Initialization Bean initialized at startup of the application
Default:
 Lazy Initialization NOT Default
 Eager Initialization Default
Code Snippet:
 Lazy Initialization @Lazy OR @Lazy(value=true)
 Eager Initialization @Lazy(value=false) OR (Absence of @Lazy)
What happens if there are errors in initializing?
Lazy Initialization Errors will result in runtime exceptions
Eager Initialization Errors will prevent application from starting up
Usage:
 Lazy Initialization Rarely used
 Eager Initialization Very frequently used
Memory Consumption:
 Less (until bean is initialized)
  Eager Initialization All beans are initialized at startup
 Recommended Scenario Beans very rarely used in your app Most of your beans

 Spring Bean Scopes
 Spring Beans are defined to be used in a specific scope:
 Singleton - One object instance per Spring IoC container
 Prototype - Possibly many object instances per Spring IoC container
 Scopes applicable ONLY for web-aware Spring ApplicationContext
 Request - One object instance per single HTTP request
 Session - One object instance per user HTTP Session
 Application - One object instance per web application runtime
 Websocket - One object instance per WebSocket instance
 Java Singleton (GOF) vs Spring Singleton
 Spring Singleton: One object instance per Spring IoC container
 Java Singleton (GOF): One object instance per JVM

 Spring Stereotype Annotations
 @Component - Generic annotation applicable for any class
 Base for all Spring Stereotype Annotations
 Specializations of @Component:
 @Service - Indicates that an annotated class has business logic
 @Controller - Indicates that an annotated class is a "Controller" (e.g. a web controller)
 Used to define controllers in your web applications and REST API
 @Repository - Indicates that an annotated class is used to retrieve and/or manipulate
 data in a database
 What should you use?
 (MY RECOMMENDATION) Use the most specific annotation possible
 Why?
 By using a specific annotation, you are giving more information to the framework about
 your intentions.
 You can use AOP at a later point to add additional behavior
 Example: For @Repository, Spring automatically wires in JDBC Exception translation features
